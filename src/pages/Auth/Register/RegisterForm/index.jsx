import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Field, Form, Formik } from 'formik';
import FieldError from 'components/ETC/FieldError';
import ButtonLink from 'components/ETC/ButtonLink';
import {
  registerUserAsync,
  selectUser,
  actionCreators,
} from 'app/slices/userSlice';
import { registerScheme } from 'validation/schemes';

const initialValues = {
  nickname: '',
  email: '',
  password: '',
  confpassword: '',
};

const registrationRUSErrors = {
  'Nickname is already in use': '–ù–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
  'Email domain is not acceptable': '–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω –ø–æ—á—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É',

  "Server is switched off":
    '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ—Ö–æ–∂–µ —á—Ç–æ –±—ç–∫-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–∫–ª—é—á–∫–µ üò¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω—É',
  'Server database is switched off':
    '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ—Ö–æ–∂–µ —á—Ç–æ –±—ç–∫-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–∫–ª—é—á–∫–µ üò¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω—É',
  'Server Error':
    '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ—Ö–æ–∂–µ —á—Ç–æ –±—ç–∫-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–∫–ª—é—á–∫–µ üò¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω—É',

  'Only 3 accounts permitted on 1 email':
    '–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ 3 –∞–∫–∫–∞—É–Ω—Ç–∞. –ö—É–¥–∞ –µ—â–µ –±–æ–ª—å—à–µ‚ùì',
  'Only 3 accounts permitted on 1 ip address':
    '–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ 3 –∞–∫–∫–∞—É–Ω—Ç–∞. –ö—É–¥–∞ –µ—â–µ –±–æ–ª—å—à–µ‚ùì',
};

const RegisterForm = () => {
  const user = useSelector(selectUser);
  const dispatch = useDispatch();

  return (
    <>
      {user.status === 'error' ? (
        <div style={{ color: '#aa4400' }}>
          {registrationRUSErrors[user.errorMessage]}
        </div>
      ) : (
        <div style={{ color: 'orangered' }}>{user.isMailSent && '–ü–∏—Å—å–º–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.'}</div>
      )}
      <Formik
        initialValues={initialValues}
        validationSchema={registerScheme}
        onSubmit={(values, formikBag) => {
          const copy = { ...values };
          const password = copy.password;
          delete copy.password;
          delete copy.confpassword;

          dispatch(
            registerUserAsync({ user: copy, password })
          );
          formikBag.resetForm();
        }}
      >
        {({ errors, touched }) => (
          <Form>
            <FieldError
              name='nickname'
              errors={errors}
              touched={touched}
              tag='div'
              text='–õ–æ–≥–∏–Ω/–ù–∏–∫'
            >
              <Field type='text' name='nickname' autoFocus />
            </FieldError>

            <FieldError
              name='email'
              errors={errors}
              touched={touched}
              tag='div'
              text='Email'
            >
              <Field type='text' name='email' />
            </FieldError>

            <FieldError
              name='password'
              errors={errors}
              touched={touched}
              tag='div'
              text='–ü–∞—Ä–æ–ª—å'
            >
              <Field type='password' name='password' />
            </FieldError>

            <FieldError
              name='confpassword'
              errors={errors}
              touched={touched}
              tag='div'
              text='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è'
            >
              <Field type='password' name='confpassword' />
            </FieldError>

            {user.status === 'loading' ? (
              <ButtonLink
                type='submit'
                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚åõ'
                variant='blue'
                style={{ marginTop: '10px' }}
              />
            ) : (
              <ButtonLink
                type='submit'
                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
                variant='blue'
                style={{ marginTop: '10px' }}
              />
            )}
          </Form>
        )}
      </Formik>
    </>
  );
};

export default RegisterForm;
