import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getUser, registerUser } from '@/api/userAPI';

const initialState = {
  data: {
    nickname: null,
    accessToken: null,

    email: null,
    discord: null,
  },
  errorMessage: '',
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getUserAsync = createAsyncThunk('user/getUser', async nickname => {
  const response = await getUser(nickname);
  // The value we return becomes the `fulfilled` action payload
  return response.data.data;
});

export const registerUserAsync = createAsyncThunk(
  'user/registerUser',
  async (values, thunkAPI) => {
    try {
      const response = await registerUser(values);
      // The value we return becomes the `fulfilled` action payload
      return response.data.data;
    } catch (error) {
      thunkAPI.dispatch(
        actionCreators.setErrorMessage(error.response.data.error.message)
      );
      throw new Error(error.response.data.error.message);
    }
  }
);

export const counterSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setErrorMessage: (state, action) => {
      state.errorMessage = action.payload;
    },
    setUserData: (state, action) => {
      state.data = action.payload;
    },
    setStatus: (state, action) => {
      state.status = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(getUserAsync.pending, state => {
        state.status = 'loading';
      })
      .addCase(getUserAsync.rejected, (state, action) => {
        state.status = 'error';
      })
      .addCase(getUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.data = action.payload;
      })

      .addCase(registerUserAsync.pending, state => {
        state.status = 'loading';
      })
      .addCase(registerUserAsync.rejected, (state, action) => {
        state.status = 'error';
      })
      .addCase(registerUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.data = action.payload;
      });
  },
});

export const actionCreators = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = state => state.user;

export const selectUserData = state => state.user.data;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const registerUserAsync1 = values => async (dispatch, getState) => {
//   try {
//     const response = await registerUser(values);

//     dispatch(actionCreators.setUserData(response));
//   } catch (error) {
//     dispatch(actionCreators.setErrorMessage(error.response.data.error.message));
//   }
// };

export default counterSlice.reducer;
